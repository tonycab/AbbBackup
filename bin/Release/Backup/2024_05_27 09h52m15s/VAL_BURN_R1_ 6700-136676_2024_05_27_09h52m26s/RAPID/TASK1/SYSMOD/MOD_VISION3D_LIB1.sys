MODULE MOD_VISION3D_LIB1(SYSMODULE)

    RECORD Camera3D

        num SocketID;
        string AdresseIP;
        num Port;

    ENDRECORD

    !***************************************************************************************************
    RECORD DataCamera3D

        bool Detect;
        num Ticket;
        num Score;
        num ProgramName;
        num ModelNumber;
        num NumPose;
        num Trans_ERR;
        num Rot_ERR;
        pose Position;

    ENDRECORD

    RECORD DataOCR

        bool Detect;
        num Ticket;
        num ProgramName;
        num ModelNumber;
        num NumString;
        string Text1;
        string Text2;
        string Text3;
        string Text4;
        string Text5;
        string Text6;
        string Text7;
        string Text8;
        string Text9;
        string Text10;

    ENDRECORD



    !***************************************************************************************************
    VAR socketdev SocketCamera{5};

    CONST errnum ERR_NO_ERROR:=0;
    CONST errnum ERR_CONNECTION:=1;
    CONST errnum ERR_TRIGGER:=2;
    CONST errnum ERR_CALIBRATION:=3;
    CONST errnum ERR_FREE_RUN:=4;
    CONST errnum ERR_PART_REAL_COORD:=5;
    CONST errnum ERR_NO_PART:=6;
    CONST errnum ERR_NO_PART_LOCALISATION:=7;
    CONST errnum ERR_NO_PART_RELOCALISATION:=8;
    CONST errnum ERR_POSE_WRITING:=9;
    CONST errnum ERR_COMPAIGN_LOAD:=10;
    CONST errnum ERR_LOG_VISION:=11;
    CONST errnum ERR_DETECTED_PART_DISPLAY:=12;
    CONST errnum ERR_MISSED_CAMERA:=13;
    CONST errnum ERR_DECONNECTION:=14;
    CONST errnum ERR_LOCAL_TRIGGER_LOAD:=15;
    CONST errnum ERR_DATA_EXPORT:=16;
    CONST errnum ERR_ACCES_PART:=17;
    CONST errnum ERR_FILTER:=18;
    CONST errnum ERR_OCR:=19;

   CONST errnum ERR_RELOC:=20;
   
    PERS num ticket;

    !***************************************************************************************************
    PROC Connection_Check(INOUT Camera3D Cam)

        VAR socketstatus status;

        status:=SocketGetStatus(SocketCamera{Cam.SocketID});

        IF status=SOCKET_CREATED THEN
            TPWrite "Instruction SocketCreate has been executed";

        ELSEIF status=SOCKET_CLOSED THEN
            TPWrite "Instruction SocketClose has been executed";

        ELSEIF status=SOCKET_BOUND THEN
            TPWrite "Instruction SocketBind has been executed";

        ELSEIF status=SOCKET_LISTENING THEN
            TPWrite "Instruction SocketListen or SocketAccept has been executed";

        ELSEIF status=SOCKET_CONNECTED THEN
            TPWrite "Instruction SocketConnect, SocketReceive or SocketSend has been executed";

        ELSE
            TPWrite "Unknown socket status";

        ENDIF

    ENDPROC

    !***************************************************************************************************
    PROC Connection_Camera3D(INOUT Camera3D Cam)

        VAR num retry_no:=0;

        SocketClose SocketCamera{Cam.SocketID};
        SocketCreate SocketCamera{Cam.SocketID};
        SocketConnect SocketCamera{Cam.SocketID},Cam.AdresseIP,Cam.Port\Time:=2;

    ERROR
        RAISE ERR_CONNECTION;

    ENDPROC

    !***************************************************************************************************
    !!Deconnection camera 
    PROC Deconnection_Camera3D(INOUT Camera3D Cam)

        SocketClose SocketCamera{Cam.SocketID};
        WaitTime 2;

    ERROR
        RAISE ERR_DECONNECTION;

    ENDPROC

    !***************************************************************************************************
    !! Commande Free RUN
    PROC FreeRun_Camera3D(INOUT Camera3D Cam,string MODE)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{2};
        VAR string ElementsRecieve{3};
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"free_run";
        ElementsSend{2}:=MODE;

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        Connection_Check Cam;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        IF ElementsRecieve{3}="PASS" AND ElementsRecieve{2}="START" THEN
            TPWrite("FreeRun;START;PASS");
            RETURN ;

        ENDIF

        IF ElementsRecieve{3}="FAIL" AND ElementsRecieve{2}="START" THEN
            TPWrite("FreeRun;START;FAIL");

        ENDIF

        IF ElementsRecieve{3}="PASS" AND ElementsRecieve{2}="STOP" THEN
            TPWrite("FreeRun;STOP;PASS");
            RETURN ;

        ENDIF

        IF ElementsRecieve{3}="FAIL" AND ElementsRecieve{2}="STOP" THEN
            TPWrite("FreeRun;STOP ;FAIL");

        ENDIF

        RAISE ERR_FREE_RUN;

    ERROR

        RAISE ERR_FREE_RUN;

    ENDPROC

    !***************************************************************************************************
    !!Commande DEBUT de la calibration
    PROC Start_Calibration_Camera3D(INOUT Camera3D Cam)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{2};
        VAR string ElementsRecieve{3};
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"calib";
        ElementsSend{2}:="START";

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=100;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        IF ElementsRecieve{3}="PASS" THEN
            TPWrite("Calib;PASS");

        ELSEIF ElementsRecieve{3}="FAIL" THEN
            TPWrite("Calib;FAIL");
            RAISE ERR_CALIBRATION;

        ELSE
            RAISE ERR_CALIBRATION;

        ENDIF

    ERROR

        RAISE ERR_CALIBRATION;

    ENDPROC

    !***************************************************************************************************
    PROC Stop_Calibration_Camera3D(INOUT Camera3D Cam)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{2};
        VAR string ElementsRecieve{3};
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"calib";
        ElementsSend{2}:="STOP";

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        IF ElementsRecieve{3}="PASS" THEN
            TPWrite("Calib;PASS");

        ELSEIF ElementsRecieve{3}="FAIL" THEN
            TPWrite("Calib;FAIL");
            RAISE ERR_CALIBRATION;

        ELSE
            RAISE ERR_CALIBRATION;

        ENDIF

    ERROR

        RAISE ERR_CALIBRATION;

    ENDPROC

    !***************************************************************************************************
    !!Commande DEBUT de la calibration table
    PROC Start_Calibration_Table_Camera3D(INOUT Camera3D Cam)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{2};
        VAR string ElementsRecieve{3};
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"calib_axe_extern";
        ElementsSend{2}:="START";

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=100;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        IF ElementsRecieve{3}="PASS" THEN
            TPWrite("calib_axe_extern;PASS");

        ELSEIF ElementsRecieve{3}="FAIL" THEN
            TPWrite("calib_axe_extern;FAIL");
            RAISE ERR_CALIBRATION;

        ELSE
            RAISE ERR_CALIBRATION;

        ENDIF

    ERROR

        RAISE ERR_CALIBRATION;

    ENDPROC

    !***************************************************************************************************
    PROC Stop_Calibration_Table_Camera3D(INOUT Camera3D Cam)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{2};
        VAR string ElementsRecieve{3};
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"calib_axe_extern";
        ElementsSend{2}:="STOP";

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        IF ElementsRecieve{3}="PASS" THEN
            TPWrite("calib_axe_extern;PASS");

        ELSEIF ElementsRecieve{3}="FAIL" THEN
            TPWrite("calib_axe_extern;FAIL");
            RAISE ERR_CALIBRATION;

        ELSE
            RAISE ERR_CALIBRATION;

        ENDIF

    ERROR

        RAISE ERR_CALIBRATION;

    ENDPROC
    
    !***************************************************************************************************
    PROC Trigger_Calibration_Table_Camera(INOUT Camera3D Cam,num Ticket, num NumProg,num NumModel)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{4};
        VAR string ElementsRecieve{5};
       
        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"calib_axe_in_pos";
        ElementsSend{2}:=ValToStr(Ticket); 
        ElementsSend{3}:=ValToStr(NumProg);
        ElementsSend{4}:=ValToStr(NumModel);
        
        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=100;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat
        IF ElementsRecieve{5}="PASS" THEN
            TPWrite("PASS");

        ELSEIF ElementsRecieve{5}="FAIL" THEN
            TPWrite("FAIL");
            RAISE ERR_CALIBRATION;

        ELSE
            RAISE ERR_CALIBRATION;

        ENDIF

    ERROR
        RAISE ERR_CALIBRATION;

    ENDPROC

    !***************************************************************************************************
    !!Commande DEBUT de la reconstruction 3D
    PROC Start_Reconstruction3D_Camera3D(INOUT Camera3D Cam, num prog, num model)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{4};
        VAR string ElementsRecieve{3};
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"reconstruct";
        ElementsSend{2}:="START";
        ElementsSend{3}:=valtostr(prog);
        ElementsSend{4}:=valtostr(model);
        
        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=100;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        IF ElementsRecieve{3}="PASS" THEN
            TPWrite("reconstruct;PASS");

        ELSEIF ElementsRecieve{3}="FAIL" THEN
            TPWrite("reconstruct;FAIL");
            RAISE ERR_CALIBRATION;

        ELSE
            RAISE ERR_CALIBRATION;

        ENDIF

    ERROR

        RAISE ERR_CALIBRATION;

    ENDPROC

    !***************************************************************************************************
    PROC Stop_Reconstruction3D_Camera3D(INOUT Camera3D Cam)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{2};
        VAR string ElementsRecieve{3};
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"reconstruct";
        ElementsSend{2}:="STOP";

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        IF ElementsRecieve{3}="PASS" THEN
            TPWrite("reconstruct;PASS");

        ELSEIF ElementsRecieve{3}="FAIL" THEN
            TPWrite("reconstruct;FAIL");
            RAISE ERR_CALIBRATION;

        ELSE
            RAISE ERR_CALIBRATION;

        ENDIF

    ERROR

        RAISE ERR_CALIBRATION;

    ENDPROC

       !***************************************************************************************************
    PROC Trigger_Reconstruction3D_Camera(INOUT Camera3D Cam,num Ticket, num Position)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{3};
        VAR string ElementsRecieve{4};
       
        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"reconstruct_pose";
        ElementsSend{2}:=ValToStr(Ticket); 
        ElementsSend{3}:=ValToStr(Position);
        
        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=100;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat
        IF ElementsRecieve{4}="PASS" THEN
            TPWrite("PASS");

        ELSEIF ElementsRecieve{4}="FAIL" THEN
            TPWrite("FAIL");
            RAISE ERR_CALIBRATION;

        ELSE
            RAISE ERR_CALIBRATION;

        ENDIF

    ERROR
        RAISE ERR_CALIBRATION;

    ENDPROC

    
    
    
    !***************************************************************************************************
    !!Commande Aquittement DEFAUT
    PROC ACK_DEFAULT_Camera3D(INOUT Camera3D Cam)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{1};
        VAR string ElementsRecieve{2};
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"ack";

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        IF ElementsRecieve{2}="PASS" THEN
            TPWrite("PASS");

        ENDIF

        IF ElementsRecieve{2}="FAIL" THEN
            TPWrite("FAIL");

        ENDIF

    ENDPROC

    !***************************************************************************************************
    !! Commande Prise de vue 
    FUNC DataCamera3D Trigger_Camera3D(INOUT Camera3D Cam,num Ticket,num ProgramName,num ModelNumber)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{4};
        VAR string ElementsRecieve{12};
        VAR pos RxRyRz;
        VAR DataCamera3D Resultat;
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"trigger";
        ElementsSend{2}:=ValToStr(Ticket);
        ElementsSend{3}:=ValToStr(ProgramName);
        ElementsSend{4}:=ValToStr(ModelNumber);

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=200;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat
        IF ElementsRecieve{5}="PASS" THEN

            Resultat.Detect:=TRUE;
            Resultat.Ticket:=ElementToNum(ElementsRecieve{2});
            Resultat.ProgramName:=ElementToNum(ElementsRecieve{3});
            Resultat.ModelNumber:=ElementToNum(ElementsRecieve{4});
            Resultat.Score:=ElementToNum(ElementsRecieve{6});
            Resultat.Position.trans.x:=ElementToNum(ElementsRecieve{7});
            Resultat.Position.trans.y:=ElementToNum(ElementsRecieve{8});
            Resultat.Position.trans.z:=ElementToNum(ElementsRecieve{9});
            Resultat.Position.rot:=OrientZYX(ElementToNum(ElementsRecieve{12}),ElementToNum(ElementsRecieve{11}),ElementToNum(ElementsRecieve{10}));

            TPWrite ValToStr(Resultat.Detect);
            TPWrite ValToStr(Resultat.Ticket);
            TPWrite ValToStr(Resultat.ProgramName);
            TPWrite ValToStr(Resultat.ModelNumber);
            TPWrite ValToStr(Resultat.Score);
            TPWrite ValToStr(Resultat.Position);

            RETURN Resultat;

        ELSEIF ElementsRecieve{5}="FAIL" THEN
            Resultat.Detect:=FALSE;
            Resultat.Ticket:=ElementToNum(ElementsRecieve{2});
            Resultat.ProgramName:=ElementToNum(ElementsRecieve{3});
            Resultat.ModelNumber:=ElementToNum(ElementsRecieve{4});

            TPWrite ValToStr(Resultat.Detect);
            TPWrite ValToStr(Resultat.Ticket);
            TPWrite ValToStr(Resultat.ProgramName);
            TPWrite ValToStr(Resultat.ModelNumber);
            RAISE ERR_TRIGGER;

        ELSE
            RAISE ERR_TRIGGER;

        ENDIF

    ERROR
        RAISE ERR_TRIGGER;

    ENDFUNC

    !***************************************************************************************************
    ! Commande Prise de vue rapide
    FUNC bool Trigger_Camera3D_SPEED(INOUT Camera3D Cam,num Ticket,num ProgramName,num ModelNumber)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{4};
        VAR string ElementsRecieve{5};
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"trigger_s";
        ElementsSend{2}:=ValToStr(Ticket);
        ElementsSend{3}:=ValToStr(ProgramName);
        ElementsSend{4}:=ValToStr(ModelNumber);

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        !!DANS LE WORD je dois avoir le nom du programme et le numério du modèle
        IF ElementsRecieve{5}="PASS" THEN
            RETURN TRUE;

        ENDIF

        IF ElementsRecieve{5}="FAIL" THEN
            RETURN FALSE;

        ELSE
            RETURN FALSE;

        ENDIF

    ERROR
        RETURN FALSE;

    ENDFUNC

    !***************************************************************************************************
    ! Commande Calcul de Calibration
    FUNC DataCamera3D Calib_Calcul_Camera3D(INOUT Camera3D Cam)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{4};
        VAR string ElementsRecieve{3};
        VAR DataCamera3D Resultat;
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"calb";
        ElementsSend{2}:="STOP";

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        IF ElementsRecieve{3}="PASS" THEN
            ElementsRecieve{2}:="STOP";
            Resultat.Trans_ERR:=ElementToNum(ElementsRecieve{4});
            Resultat.Rot_ERR:=ElementToNum(ElementsRecieve{5});

            TPWrite ValToStr(Resultat.Trans_ERR);
            TPWrite ValToStr(Resultat.Rot_ERR);

        ENDIF

        IF ElementsRecieve{3}="FAIL" THEN
            ElementsRecieve{2}:="STOP";

        ELSE
            RAISE ERR_CALIBRATION;

        ENDIF

    ERROR
        RAISE ERR_CALIBRATION;

    ENDFUNC

    !***************************************************************************************************
    !Commande des résultats de la prise de vue spécifiée en paramètres
    FUNC DataCamera3D Recieve_Position_Camera3D(INOUT Camera3D Cam,num Ticket,num ProgramName,num ModelNumber)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{4};
        VAR string ElementsRecieve{12};
        VAR pos RxRyRz;
        VAR DataCamera3D Resultat;
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"data";
        ElementsSend{2}:=ValToStr(Ticket);
        ElementsSend{3}:=ValToStr(ProgramName);
        ElementsSend{4}:=ValToStr(ModelNumber);

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat
        IF ElementsRecieve{5}="PASS" THEN

            Resultat.Detect:=TRUE;
            Resultat.Ticket:=ElementToNum(ElementsRecieve{2});
            Resultat.ProgramName:=ElementToNum(ElementsRecieve{3});
            Resultat.ModelNumber:=ElementToNum(ElementsRecieve{4});
            Resultat.Score:=ElementToNum(ElementsRecieve{6});
            Resultat.Position.trans.x:=ElementToNum(ElementsRecieve{7});
            Resultat.Position.trans.y:=ElementToNum(ElementsRecieve{8});
            Resultat.Position.trans.z:=ElementToNum(ElementsRecieve{9});
            Resultat.Position.rot:=OrientZYX(ElementToNum(ElementsRecieve{12}),ElementToNum(ElementsRecieve{11}),ElementToNum(ElementsRecieve{10}));

            TPWrite ValToStr(Resultat.Detect);
            TPWrite ValToStr(Resultat.Ticket);
            TPWrite ValToStr(Resultat.ProgramName);
            TPWrite ValToStr(Resultat.ModelNumber);
            TPWrite ValToStr(Resultat.Score);
            TPWrite ValToStr(Resultat.Position);

            RETURN Resultat;

        ENDIF

        IF ElementsRecieve{5}="FAIL" THEN
            Resultat.Detect:=FALSE;
            Resultat.Ticket:=ElementToNum(ElementsRecieve{2});
            Resultat.ProgramName:=ElementToNum(ElementsRecieve{3});
            Resultat.ModelNumber:=ElementToNum(ElementsRecieve{4});

            TPWrite ValToStr(Resultat.Detect);
            TPWrite ValToStr(Resultat.Ticket);
            TPWrite ValToStr(Resultat.ProgramName);
            TPWrite ValToStr(Resultat.ModelNumber);

        ELSE
            RAISE ERR_COMPAIGN_LOAD;

        ENDIF

    ERROR
        RAISE ERR_COMPAIGN_LOAD;

    ENDFUNC

    !***************************************************************************************************
    !!Commande ETAT VISION
    PROC State_Vision(INOUT Camera3D Cam)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{1};
        VAR string ElementsRecieve{3};

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"info";

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat
        IF ElementsRecieve{2}="PASS" THEN
            TPWrite("info;PASS;0");

        ENDIF

        IF ElementsRecieve{2}="FAIL" THEN

        ENDIF

    ERROR

    ENDPROC

    !***************************************************************************************************
    PROC Trigger_Calibration_Camera(INOUT Camera3D Cam,num NumPose,pose Position)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{8};
        VAR string ElementsRecieve{3};
        VAR DataCamera3D Resultat;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"calib_pose";
        IF Present(NumPose) AND Present(Position) THEN
            ElementsSend{2}:=ValToStr(NumPose);
            ElementsSend{3}:=ValToStr(Position.trans.x);
            ElementsSend{4}:=ValToStr(Position.trans.y);
            ElementsSend{5}:=ValToStr(Position.trans.z);
            ElementsSend{6}:=ValToStr(EulerZYX(\X,Position.rot));
            ElementsSend{7}:=ValToStr(EulerZYX(\Y,Position.rot));
            ElementsSend{8}:=ValToStr(EulerZYX(\Z,Position.rot));
        ENDIF

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=100;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat
        IF ElementsRecieve{3}="PASS" THEN
            Resultat.NumPose:=ElementToNum(ElementsRecieve{2});
            TPWrite ValToStr(Resultat.NumPose);
            TPWrite("PASS");

        ELSEIF ElementsRecieve{3}="FAIL" THEN
            Resultat.NumPose:=ElementToNum(ElementsRecieve{2});
            TPWrite ValToStr(Resultat.NumPose);
            TPWrite("FAIL");
            RAISE ERR_CALIBRATION;

        ELSE
            RAISE ERR_CALIBRATION;

        ENDIF

    ERROR
        RAISE ERR_CALIBRATION;

    ENDPROC

    !***************************************************************************************************
    ! Commande Chargement programme
    PROC Program_Load_Camera3D(INOUT Camera3D Cam,num ProgramName,num ModelNumber)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{3};
        VAR string ElementsRecieve{4};
        VAR DataCamera3D Resultat;
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"ref";
        ElementsSend{2}:=ValToStr(ProgramName);
        ElementsSend{3}:=ValToStr(ModelNumber);

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat
        IF ElementsRecieve{4}="PASS" THEN
            Resultat.ProgramName:=ElementToNum(ElementsRecieve{2});
            Resultat.ModelNumber:=ElementToNum(ElementsRecieve{3});
            TPWrite ValToStr(Resultat.ProgramName);
            TPWrite ValToStr(Resultat.ModelNumber);
            TPWrite("PASS");

        ELSEIF ElementsRecieve{4}="FAIL" THEN
            Resultat.ProgramName:=ElementToNum(ElementsRecieve{2});
            Resultat.ModelNumber:=ElementToNum(ElementsRecieve{3});
            TPWrite ValToStr(Resultat.ProgramName);
            TPWrite ValToStr(Resultat.ModelNumber);
            TPWrite("FAIL");
            RAISE ERR_COMPAIGN_LOAD;

        ELSE
            RAISE ERR_COMPAIGN_LOAD;

        ENDIF

    ERROR
        RAISE ERR_COMPAIGN_LOAD;

    ENDPROC

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    !***************************************************************************************************
    PROC Test_Camera()

        VAR Camera3D Camera1:=[1,"10.89.1.161",11000];
        !VAR Camera3D Camera1:=[1,"192.32.98.60",11000];
        VAR DataCamera3D D:=[FALSE,0,0,0,0,0,0,0,[[0,0,0],[1,0,0,0]]];

        Connection_Camera3D Camera1;

        Start_Calibration_Camera3D Camera1;
        Stop_Calibration_Camera3D Camera1;

        Program_Load_Camera3D Camera1,1,0;

        IF Trigger_Camera3D_SPEED(Camera1,ticket,1,0) THEN

            D:=Recieve_Position_Camera3D(Camera1,ticket,1,0);

        ENDIF

        FreeRun_Camera3D Camera1,"STOP";
        FreeRun_Camera3D Camera1,"START";

        State_Vision Camera1;

        Trigger_Calibration_Camera Camera1,2,[[0,0,0],[1,0,0,0]];

        ACK_DEFAULT_Camera3D Camera1;

        ticket:=ticket+1;
        !Deconnection_Camera3D Camera1;

    ERROR

        TPWrite ValToStr(ERRNO);
        !stop;

    ENDPROC

    !***************************************************************************************************
    PROC Filter(Camera3D Cam)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{1};
        VAR string ElementsRecieve{3};
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"filter";

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=10;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat

        IF ElementsRecieve{3}="PASS" THEN
            TPWrite("FILTER;PASS");

        ELSEIF ElementsRecieve{3}="FAIL" THEN
            TPWrite("FILTER;FAIL");
            RAISE ERR_FILTER;

        ELSE
            RAISE ERR_FILTER;

        ENDIF

    ERROR
        RAISE ERR_FILTER;

    ENDPROC



    !***************************************************************************************************
    !! Commande Prise de vue 
    FUNC DataOCR Trigger_OCR(INOUT Camera3D Cam,num Ticket,num ProgramName,num ModelNumber)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{4};
        VAR string ElementsRecieve{16};
        VAR pos RxRyRz;
        VAR DataOCR Resultat;
        VAR bool b;

        !Preparation du message
        ElementsSend{1}:=ByteToStr(47\Char)+"trigger2d";
        ElementsSend{2}:=ValToStr(Ticket);
        ElementsSend{3}:=ValToStr(ProgramName);
        ElementsSend{4}:=ValToStr(ModelNumber);

        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=200;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat
        IF ElementsRecieve{5}="PASS" THEN

            Resultat.Detect:=TRUE;
            Resultat.Ticket:=ElementToNum(ElementsRecieve{2});
            Resultat.ProgramName:=ElementToNum(ElementsRecieve{3});
            Resultat.ModelNumber:=ElementToNum(ElementsRecieve{4});
            Resultat.NumString :=ElementToNum(ElementsRecieve{6}); 
            Resultat.Text1 :=ElementsRecieve{7}; 
            Resultat.Text2 :=ElementsRecieve{8};
            Resultat.Text3 :=ElementsRecieve{9};
            Resultat.Text4 :=ElementsRecieve{10};
            Resultat.Text5 :=ElementsRecieve{11};
            Resultat.Text6 :=ElementsRecieve{12};
            Resultat.Text7 :=ElementsRecieve{13};
            Resultat.Text8 :=ElementsRecieve{14};
            Resultat.Text9 :=ElementsRecieve{15};
            Resultat.Text10 :=ElementsRecieve{16};

            RETURN Resultat;

        ELSEIF ElementsRecieve{5}="FAIL" THEN
            Resultat.Detect:=FALSE;
            Resultat.Ticket:=ElementToNum(ElementsRecieve{2});
            Resultat.ProgramName:=ElementToNum(ElementsRecieve{3});
            Resultat.ModelNumber:=ElementToNum(ElementsRecieve{4});

            RAISE ERR_OCR;

        ELSE
            RAISE ERR_OCR;

        ENDIF

    ERROR

        TPWrite "resultat" + ElementsRecieve{5};
        RAISE ERR_OCR;

    ENDFUNC

FUNC string removequote(string str)
    VAR num i;
    VAR string strFilter;
    VAR num ln ;
    
    ln := strlen(str);
    IF ln<=0 RETURN str;
    
    FOR i FROM 1 TO strlen(str) DO
        
        IF StrPart(str,i,1) <> "" THEN
        
            strFilter :=StrPart(str,i,1);
        
        endif
        
    ENDFOR
    
    RETURN strFilter;
endfunc

PROC testocr()
    
    

    
    
    Connection_Camera3D Camera1;
    
 TPWrite valtostr(Trigger_OCR(Camera1,5,0,0));
    
    
endproc


 !***************************************************************************************************
    PROC ReconstructAdd(INOUT Camera3D Cam,num ProgramName,num ModelNumber,bool Init,pose Position)

        VAR byte dataSend{1024};
        VAR byte dataRecieve{1024};
        VAR string ElementsSend{10};
        VAR string ElementsRecieve{4};
        VAR DataCamera3D Resultat;

        !Preparation du message
            ElementsSend{1}:=ByteToStr(47\Char)+"reconstruct_add";
            ElementsSend{2}:=ValToStr(ProgramName);
            ElementsSend{3}:=ValToStr(ModelNumber);
            ElementsSend{4}:=ValToStr(Init);
            ElementsSend{5}:=ValToStr(Position.trans.x);
            ElementsSend{6}:=ValToStr(Position.trans.y);
            ElementsSend{7}:=ValToStr(Position.trans.z);
            ElementsSend{8}:=ValToStr(EulerZYX(\X,Position.rot));
            ElementsSend{9}:=ValToStr(EulerZYX(\Y,Position.rot));
            ElementsSend{10}:=ValToStr(EulerZYX(\Z,Position.rot));
        
        !Sérialisation du message
        Serialize_Data ElementsSend,dataSend;

        !Envoi des données
        SocketSend SocketCamera{Cam.SocketID}\Data:=dataSend;

        !Attente et reception des données
        SocketReceive SocketCamera{Cam.SocketID}\Data:=dataRecieve\Time:=100;

        !Deserialisation des données
        DeSerialize_Data dataRecieve,ElementsRecieve;

        !Traitement du résultat
        IF ElementsRecieve{4}="PASS" THEN
            TPWrite("PASS");

        ELSEIF ElementsRecieve{4}="FAIL" THEN
            TPWrite("FAIL");
           

        ELSE
        TPWrite("FAIL");

        ENDIF

    ERROR
        RAISE;

    ENDPROC










ENDMODULE